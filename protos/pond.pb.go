// Code generated by protoc-gen-gogo.
// source: pond.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	pond.proto

It has these top-level messages:
	Request
	Reply
	NewAccount
	AccountDetails
	AccountCreated
	Delivery
	Fetch
	Fetched
	ServerAnnounce
	Upload
	UploadReply
	Download
	DownloadReply
	SignedRevocation
	HMACSetup
	HMACStrike
	KeyExchange
	SignedKeyExchange
	Message
*/
package protos

import proto "code.google.com/p/gogoprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Reply_Status int32

const (
	Reply_OK                         Reply_Status = 0
	Reply_PARSE_ERROR                Reply_Status = 1
	Reply_NO_REQUEST                 Reply_Status = 2
	Reply_INTERNAL_ERROR             Reply_Status = 3
	Reply_IDENTITY_ALREADY_KNOWN     Reply_Status = 10
	Reply_OVERLOAD                   Reply_Status = 11
	Reply_NO_SUCH_ADDRESS            Reply_Status = 12
	Reply_DELIVERY_SIGNATURE_INVALID Reply_Status = 13
	Reply_INCORRECT_GENERATION       Reply_Status = 14
	Reply_MAILBOX_FULL               Reply_Status = 15
	Reply_NO_ACCOUNT                 Reply_Status = 16
	Reply_OVER_QUOTA                 Reply_Status = 17
	Reply_FILE_LARGER_THAN_SIZE      Reply_Status = 18
	Reply_FILE_COMPLETE              Reply_Status = 19
	Reply_NO_SUCH_FILE               Reply_Status = 20
	Reply_RESUME_PAST_END_OF_FILE    Reply_Status = 21
	Reply_GENERATION_REVOKED         Reply_Status = 22
	Reply_CANNOT_PARSE_REVOCATION    Reply_Status = 23
	// REGISTRATION_DISABLED may be returned after a NewAccount
	// request to indicate the the server doesn't accept new
	// registrations.
	Reply_REGISTRATION_DISABLED Reply_Status = 24
	// HMAC_KEY_ALREADY_SET is returned in reply to a HMACSetup
	// request if a different HMAC key has already been setup.
	Reply_HMAC_KEY_ALREADY_SET Reply_Status = 25
	// HMAC_NOT_SETUP results from a delivery attempt when the
	// recipient hasn't configured an HMAC key.
	Reply_HMAC_NOT_SETUP Reply_Status = 26
	// HMAC_INCORRECT results from a delivery when the HMAC of the
	// one-time public key doesn't validate.
	Reply_HMAC_INCORRECT Reply_Status = 27
	// HMAC_USED results from a delivery when the HMAC value has
	// already been used.
	Reply_HMAC_USED Reply_Status = 28
	// HMAC_REVOKED results from a delivery when the HMAC value has
	// been marked as revoked.
	Reply_HMAC_REVOKED Reply_Status = 29
)

var Reply_Status_name = map[int32]string{
	0:  "OK",
	1:  "PARSE_ERROR",
	2:  "NO_REQUEST",
	3:  "INTERNAL_ERROR",
	10: "IDENTITY_ALREADY_KNOWN",
	11: "OVERLOAD",
	12: "NO_SUCH_ADDRESS",
	13: "DELIVERY_SIGNATURE_INVALID",
	14: "INCORRECT_GENERATION",
	15: "MAILBOX_FULL",
	16: "NO_ACCOUNT",
	17: "OVER_QUOTA",
	18: "FILE_LARGER_THAN_SIZE",
	19: "FILE_COMPLETE",
	20: "NO_SUCH_FILE",
	21: "RESUME_PAST_END_OF_FILE",
	22: "GENERATION_REVOKED",
	23: "CANNOT_PARSE_REVOCATION",
	24: "REGISTRATION_DISABLED",
	25: "HMAC_KEY_ALREADY_SET",
	26: "HMAC_NOT_SETUP",
	27: "HMAC_INCORRECT",
	28: "HMAC_USED",
	29: "HMAC_REVOKED",
}
var Reply_Status_value = map[string]int32{
	"OK":                         0,
	"PARSE_ERROR":                1,
	"NO_REQUEST":                 2,
	"INTERNAL_ERROR":             3,
	"IDENTITY_ALREADY_KNOWN":     10,
	"OVERLOAD":                   11,
	"NO_SUCH_ADDRESS":            12,
	"DELIVERY_SIGNATURE_INVALID": 13,
	"INCORRECT_GENERATION":       14,
	"MAILBOX_FULL":               15,
	"NO_ACCOUNT":                 16,
	"OVER_QUOTA":                 17,
	"FILE_LARGER_THAN_SIZE":      18,
	"FILE_COMPLETE":              19,
	"NO_SUCH_FILE":               20,
	"RESUME_PAST_END_OF_FILE":    21,
	"GENERATION_REVOKED":         22,
	"CANNOT_PARSE_REVOCATION":    23,
	"REGISTRATION_DISABLED":      24,
	"HMAC_KEY_ALREADY_SET":       25,
	"HMAC_NOT_SETUP":             26,
	"HMAC_INCORRECT":             27,
	"HMAC_USED":                  28,
	"HMAC_REVOKED":               29,
}

func (x Reply_Status) Enum() *Reply_Status {
	p := new(Reply_Status)
	*p = x
	return p
}
func (x Reply_Status) String() string {
	return proto.EnumName(Reply_Status_name, int32(x))
}
func (x *Reply_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Reply_Status_value, data, "Reply_Status")
	if err != nil {
		return err
	}
	*x = Reply_Status(value)
	return nil
}

type Message_Encoding int32

const (
	Message_RAW  Message_Encoding = 0
	Message_GZIP Message_Encoding = 1
)

var Message_Encoding_name = map[int32]string{
	0: "RAW",
	1: "GZIP",
}
var Message_Encoding_value = map[string]int32{
	"RAW":  0,
	"GZIP": 1,
}

func (x Message_Encoding) Enum() *Message_Encoding {
	p := new(Message_Encoding)
	*p = x
	return p
}
func (x Message_Encoding) String() string {
	return proto.EnumName(Message_Encoding_name, int32(x))
}
func (x *Message_Encoding) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Message_Encoding_value, data, "Message_Encoding")
	if err != nil {
		return err
	}
	*x = Message_Encoding(value)
	return nil
}

// Request is the client's request to the server. Only one of the optional
// messages may be present in any Request.
type Request struct {
	NewAccount       *NewAccount       `protobuf:"bytes,1,opt,name=new_account" json:"new_account,omitempty"`
	Deliver          *Delivery         `protobuf:"bytes,2,opt,name=deliver" json:"deliver,omitempty"`
	Fetch            *Fetch            `protobuf:"bytes,3,opt,name=fetch" json:"fetch,omitempty"`
	Upload           *Upload           `protobuf:"bytes,4,opt,name=upload" json:"upload,omitempty"`
	Download         *Download         `protobuf:"bytes,5,opt,name=download" json:"download,omitempty"`
	Revocation       *SignedRevocation `protobuf:"bytes,6,opt,name=revocation" json:"revocation,omitempty"`
	HmacSetup        *HMACSetup        `protobuf:"bytes,7,opt,name=hmac_setup" json:"hmac_setup,omitempty"`
	HmacStrike       *HMACStrike       `protobuf:"bytes,8,opt,name=hmac_strike" json:"hmac_strike,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

func (m *Request) GetNewAccount() *NewAccount {
	if m != nil {
		return m.NewAccount
	}
	return nil
}

func (m *Request) GetDeliver() *Delivery {
	if m != nil {
		return m.Deliver
	}
	return nil
}

func (m *Request) GetFetch() *Fetch {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *Request) GetUpload() *Upload {
	if m != nil {
		return m.Upload
	}
	return nil
}

func (m *Request) GetDownload() *Download {
	if m != nil {
		return m.Download
	}
	return nil
}

func (m *Request) GetRevocation() *SignedRevocation {
	if m != nil {
		return m.Revocation
	}
	return nil
}

func (m *Request) GetHmacSetup() *HMACSetup {
	if m != nil {
		return m.HmacSetup
	}
	return nil
}

func (m *Request) GetHmacStrike() *HMACStrike {
	if m != nil {
		return m.HmacStrike
	}
	return nil
}

// Reply is the server's reply to the client.
type Reply struct {
	Status           *Reply_Status       `protobuf:"varint,1,opt,name=status,enum=protos.Reply_Status,def=0" json:"status,omitempty"`
	AccountCreated   *AccountCreated     `protobuf:"bytes,2,opt,name=account_created" json:"account_created,omitempty"`
	Fetched          *Fetched            `protobuf:"bytes,3,opt,name=fetched" json:"fetched,omitempty"`
	Announce         *ServerAnnounce     `protobuf:"bytes,4,opt,name=announce" json:"announce,omitempty"`
	Upload           *UploadReply        `protobuf:"bytes,5,opt,name=upload" json:"upload,omitempty"`
	Download         *DownloadReply      `protobuf:"bytes,6,opt,name=download" json:"download,omitempty"`
	Revocation       *SignedRevocation   `protobuf:"bytes,7,opt,name=revocation" json:"revocation,omitempty"`
	ExtraRevocations []*SignedRevocation `protobuf:"bytes,8,rep,name=extra_revocations" json:"extra_revocations,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}

const Default_Reply_Status Reply_Status = Reply_OK

func (m *Reply) GetStatus() Reply_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_Reply_Status
}

func (m *Reply) GetAccountCreated() *AccountCreated {
	if m != nil {
		return m.AccountCreated
	}
	return nil
}

func (m *Reply) GetFetched() *Fetched {
	if m != nil {
		return m.Fetched
	}
	return nil
}

func (m *Reply) GetAnnounce() *ServerAnnounce {
	if m != nil {
		return m.Announce
	}
	return nil
}

func (m *Reply) GetUpload() *UploadReply {
	if m != nil {
		return m.Upload
	}
	return nil
}

func (m *Reply) GetDownload() *DownloadReply {
	if m != nil {
		return m.Download
	}
	return nil
}

func (m *Reply) GetRevocation() *SignedRevocation {
	if m != nil {
		return m.Revocation
	}
	return nil
}

func (m *Reply) GetExtraRevocations() []*SignedRevocation {
	if m != nil {
		return m.ExtraRevocations
	}
	return nil
}

// NewAccount is a request that the client may send to the server to request a
// new account. The public identity of the connecting client will be the `name'
// of the new account.
type NewAccount struct {
	// generation contains the revocation generation for the account. The
	// client should pick it at random in order to hide the number of
	// revocations that the client has performed.
	Generation *uint32 `protobuf:"fixed32,1,req,name=generation" json:"generation,omitempty"`
	// group contains the serialised bbssig.Group for authenticating
	// deliveries to this account.
	Group []byte `protobuf:"bytes,2,req,name=group" json:"group,omitempty"`
	// hmac_key contains an HMAC key used to authenticate delivery
	// attempts.
	HmacKey          []byte `protobuf:"bytes,3,opt,name=hmac_key" json:"hmac_key,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *NewAccount) Reset()         { *m = NewAccount{} }
func (m *NewAccount) String() string { return proto.CompactTextString(m) }
func (*NewAccount) ProtoMessage()    {}

func (m *NewAccount) GetGeneration() uint32 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

func (m *NewAccount) GetGroup() []byte {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *NewAccount) GetHmacKey() []byte {
	if m != nil {
		return m.HmacKey
	}
	return nil
}

// AccountDetails contains the state of an account.
type AccountDetails struct {
	// queue is the number of messages waiting at the server.
	Queue *uint32 `protobuf:"varint,1,req,name=queue" json:"queue,omitempty"`
	// max_queue is the maximum number of messages that the server will
	// queue for this account.
	MaxQueue         *uint32 `protobuf:"varint,2,req,name=max_queue" json:"max_queue,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AccountDetails) Reset()         { *m = AccountDetails{} }
func (m *AccountDetails) String() string { return proto.CompactTextString(m) }
func (*AccountDetails) ProtoMessage()    {}

func (m *AccountDetails) GetQueue() uint32 {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return 0
}

func (m *AccountDetails) GetMaxQueue() uint32 {
	if m != nil && m.MaxQueue != nil {
		return *m.MaxQueue
	}
	return 0
}

// AccountCreated is the reply to a NewAccount request.
type AccountCreated struct {
	Details          *AccountDetails `protobuf:"bytes,1,req,name=details" json:"details,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *AccountCreated) Reset()         { *m = AccountCreated{} }
func (m *AccountCreated) String() string { return proto.CompactTextString(m) }
func (*AccountCreated) ProtoMessage()    {}

func (m *AccountCreated) GetDetails() *AccountDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// Delivery is a request from a client to deliver a message to an account on
// this server. There's no explicit reply protobuf for this request. Success is
// indicated via |status|.
type Delivery struct {
	// The 32-byte, public identity of the target account.
	To []byte `protobuf:"bytes,1,req,name=to" json:"to,omitempty"`
	// A group signature of |message| proving authorisation to deliver
	// messages to the account.
	GroupSignature []byte `protobuf:"bytes,2,opt,name=group_signature" json:"group_signature,omitempty"`
	// The current generation number in order for the server to send
	// revocation updates.
	Generation *uint32 `protobuf:"fixed32,3,opt,name=generation" json:"generation,omitempty"`
	// The padded message to deliver.
	Message []byte `protobuf:"bytes,4,req,name=message" json:"message,omitempty"`
	// one_time_public_key contains an Ed25519 public key that was issued
	// by the recipient in order to authenticate delivery attempts.
	OneTimePublicKey []byte `protobuf:"bytes,5,opt,name=one_time_public_key" json:"one_time_public_key,omitempty"`
	// hmac_of_public_key contains a 63-bit HMAC of public key using the
	// HMAC key known to server and recipient.
	HmacOfPublicKey *uint64 `protobuf:"fixed64,6,opt,name=hmac_of_public_key" json:"hmac_of_public_key,omitempty"`
	// one_time_signature contains a signature, by public_key, of message.
	OneTimeSignature []byte `protobuf:"bytes,7,opt,name=one_time_signature" json:"one_time_signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Delivery) Reset()         { *m = Delivery{} }
func (m *Delivery) String() string { return proto.CompactTextString(m) }
func (*Delivery) ProtoMessage()    {}

func (m *Delivery) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Delivery) GetGroupSignature() []byte {
	if m != nil {
		return m.GroupSignature
	}
	return nil
}

func (m *Delivery) GetGeneration() uint32 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

func (m *Delivery) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Delivery) GetOneTimePublicKey() []byte {
	if m != nil {
		return m.OneTimePublicKey
	}
	return nil
}

func (m *Delivery) GetHmacOfPublicKey() uint64 {
	if m != nil && m.HmacOfPublicKey != nil {
		return *m.HmacOfPublicKey
	}
	return 0
}

func (m *Delivery) GetOneTimeSignature() []byte {
	if m != nil {
		return m.OneTimeSignature
	}
	return nil
}

// Fetch is a request to fetch a message. It may result in either a Fetched, or
// ServerAnnounce message. (Or none at all if no messages are pending.)
type Fetch struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *Fetch) Reset()         { *m = Fetch{} }
func (m *Fetch) String() string { return proto.CompactTextString(m) }
func (*Fetch) ProtoMessage()    {}

// Fetched is the reply to a Fetch request if the server has a message for
// delivery.
type Fetched struct {
	// group_signature is the group signature presented by the sender.
	GroupSignature []byte `protobuf:"bytes,1,req,name=group_signature" json:"group_signature,omitempty"`
	// generation is the generation number used for delivery.
	Generation       *uint32         `protobuf:"fixed32,2,req,name=generation" json:"generation,omitempty"`
	Message          []byte          `protobuf:"bytes,3,req,name=message" json:"message,omitempty"`
	Details          *AccountDetails `protobuf:"bytes,4,req,name=details" json:"details,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *Fetched) Reset()         { *m = Fetched{} }
func (m *Fetched) String() string { return proto.CompactTextString(m) }
func (*Fetched) ProtoMessage()    {}

func (m *Fetched) GetGroupSignature() []byte {
	if m != nil {
		return m.GroupSignature
	}
	return nil
}

func (m *Fetched) GetGeneration() uint32 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

func (m *Fetched) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Fetched) GetDetails() *AccountDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// ServerAnnounce is a special type of reply to a Fetch request. The message
// comes from the server, rather than from another client and it's intended to
// be used for announcements from the server operator to all or some users.
type ServerAnnounce struct {
	Message          *Message `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ServerAnnounce) Reset()         { *m = ServerAnnounce{} }
func (m *ServerAnnounce) String() string { return proto.CompactTextString(m) }
func (*ServerAnnounce) ProtoMessage()    {}

func (m *ServerAnnounce) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type Upload struct {
	Id               *uint64 `protobuf:"fixed64,1,req,name=id" json:"id,omitempty"`
	Size             *int64  `protobuf:"varint,2,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Upload) Reset()         { *m = Upload{} }
func (m *Upload) String() string { return proto.CompactTextString(m) }
func (*Upload) ProtoMessage()    {}

func (m *Upload) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Upload) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type UploadReply struct {
	Resume           *int64 `protobuf:"varint,1,opt,name=resume" json:"resume,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UploadReply) Reset()         { *m = UploadReply{} }
func (m *UploadReply) String() string { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()    {}

func (m *UploadReply) GetResume() int64 {
	if m != nil && m.Resume != nil {
		return *m.Resume
	}
	return 0
}

type Download struct {
	From             []byte  `protobuf:"bytes,1,req,name=from" json:"from,omitempty"`
	Id               *uint64 `protobuf:"fixed64,2,req,name=id" json:"id,omitempty"`
	Resume           *int64  `protobuf:"varint,3,opt,name=resume" json:"resume,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Download) Reset()         { *m = Download{} }
func (m *Download) String() string { return proto.CompactTextString(m) }
func (*Download) ProtoMessage()    {}

func (m *Download) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Download) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Download) GetResume() int64 {
	if m != nil && m.Resume != nil {
		return *m.Resume
	}
	return 0
}

type DownloadReply struct {
	Size             *int64 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DownloadReply) Reset()         { *m = DownloadReply{} }
func (m *DownloadReply) String() string { return proto.CompactTextString(m) }
func (*DownloadReply) ProtoMessage()    {}

func (m *DownloadReply) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

// SignedRevocation is a request for the server to store an update to the group
// public key that revokes some sender. The server will reply with a revocation
// for generation x when a delivery to that generation is requested.
type SignedRevocation struct {
	Revocation       *SignedRevocation_Revocation `protobuf:"bytes,1,req,name=revocation" json:"revocation,omitempty"`
	Signature        []byte                       `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *SignedRevocation) Reset()         { *m = SignedRevocation{} }
func (m *SignedRevocation) String() string { return proto.CompactTextString(m) }
func (*SignedRevocation) ProtoMessage()    {}

func (m *SignedRevocation) GetRevocation() *SignedRevocation_Revocation {
	if m != nil {
		return m.Revocation
	}
	return nil
}

func (m *SignedRevocation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SignedRevocation_Revocation struct {
	Generation       *uint32 `protobuf:"fixed32,1,req,name=generation" json:"generation,omitempty"`
	Revocation       []byte  `protobuf:"bytes,2,req,name=revocation" json:"revocation,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignedRevocation_Revocation) Reset()         { *m = SignedRevocation_Revocation{} }
func (m *SignedRevocation_Revocation) String() string { return proto.CompactTextString(m) }
func (*SignedRevocation_Revocation) ProtoMessage()    {}

func (m *SignedRevocation_Revocation) GetGeneration() uint32 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

func (m *SignedRevocation_Revocation) GetRevocation() []byte {
	if m != nil {
		return m.Revocation
	}
	return nil
}

// HMACSetup can be sent by a client to establish an HMAC key if it didn't do
// so at account creation time.
type HMACSetup struct {
	HmacKey          []byte `protobuf:"bytes,1,req,name=hmac_key" json:"hmac_key,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *HMACSetup) Reset()         { *m = HMACSetup{} }
func (m *HMACSetup) String() string { return proto.CompactTextString(m) }
func (*HMACSetup) ProtoMessage()    {}

func (m *HMACSetup) GetHmacKey() []byte {
	if m != nil {
		return m.HmacKey
	}
	return nil
}

// HMACStrike is used by a client to record a number of HMAC values as used.
type HMACStrike struct {
	// hmacs contains a number of 63-bit HMACs. The MSB is used to signal
	// whether the HMAC should be considered used (0) or revoked (1).
	Hmacs            []uint64 `protobuf:"fixed64,1,rep,packed,name=hmacs" json:"hmacs,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HMACStrike) Reset()         { *m = HMACStrike{} }
func (m *HMACStrike) String() string { return proto.CompactTextString(m) }
func (*HMACStrike) ProtoMessage()    {}

func (m *HMACStrike) GetHmacs() []uint64 {
	if m != nil {
		return m.Hmacs
	}
	return nil
}

// KeyExchange is a message sent between clients to establish a relation. It's
// always found inside a SignedKeyExchange.
type KeyExchange struct {
	// Ed25519 public key.
	PublicKey []byte `protobuf:"bytes,1,req,name=public_key" json:"public_key,omitempty"`
	// Curve25519 public key. (Used to tell the server which account to
	// deliver a message to.)
	// Note: in the most up-to-date revision of the Pond ratchet, this
	// should be equal to |public_key|, modulo isomorphism.
	IdentityPublic []byte `protobuf:"bytes,2,req,name=identity_public" json:"identity_public,omitempty"`
	// The URL of this user's home server.
	Server *string `protobuf:"bytes,3,req,name=server" json:"server,omitempty"`
	// A Curve25519, initial Diffie-Hellman value.
	Dh []byte `protobuf:"bytes,4,req,name=dh" json:"dh,omitempty"`
	// dh1 contains the second, curve25519, public key if the new-form
	// ratchet is being used.
	Dh1 []byte `protobuf:"bytes,8,opt,name=dh1" json:"dh1,omitempty"`
	// A serialised bbssig.Group.
	Group []byte `protobuf:"bytes,5,req,name=group" json:"group,omitempty"`
	// A bbssig.PrivateKey to authorise message delivery.
	GroupKey []byte `protobuf:"bytes,6,req,name=group_key" json:"group_key,omitempty"`
	// The generation number of |group|.
	Generation       *uint32 `protobuf:"varint,7,req,name=generation" json:"generation,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyExchange) Reset()         { *m = KeyExchange{} }
func (m *KeyExchange) String() string { return proto.CompactTextString(m) }
func (*KeyExchange) ProtoMessage()    {}

func (m *KeyExchange) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *KeyExchange) GetIdentityPublic() []byte {
	if m != nil {
		return m.IdentityPublic
	}
	return nil
}

func (m *KeyExchange) GetServer() string {
	if m != nil && m.Server != nil {
		return *m.Server
	}
	return ""
}

func (m *KeyExchange) GetDh() []byte {
	if m != nil {
		return m.Dh
	}
	return nil
}

func (m *KeyExchange) GetDh1() []byte {
	if m != nil {
		return m.Dh1
	}
	return nil
}

func (m *KeyExchange) GetGroup() []byte {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *KeyExchange) GetGroupKey() []byte {
	if m != nil {
		return m.GroupKey
	}
	return nil
}

func (m *KeyExchange) GetGeneration() uint32 {
	if m != nil && m.Generation != nil {
		return *m.Generation
	}
	return 0
}

// A SignedKeyExchange is a message that's sent between clients and exposed in
// the UI. It's typically found in a PEM block with type "POND KEY EXCHANGE".
type SignedKeyExchange struct {
	// signed contains a serialised KeyExchange message.
	Signed []byte `protobuf:"bytes,1,req,name=signed" json:"signed,omitempty"`
	// signature contains an Ed25519 signature of |signed| by
	// |signed.public_key|.
	Signature        []byte `protobuf:"bytes,2,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SignedKeyExchange) Reset()         { *m = SignedKeyExchange{} }
func (m *SignedKeyExchange) String() string { return proto.CompactTextString(m) }
func (*SignedKeyExchange) ProtoMessage()    {}

func (m *SignedKeyExchange) GetSigned() []byte {
	if m != nil {
		return m.Signed
	}
	return nil
}

func (m *SignedKeyExchange) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Message is typically contained within a NaCl box that's passed between
// clients using Delivery and Fetch.
type Message struct {
	// id is generated by the sender in order for the receiver to associate
	// replies.
	Id *uint64 `protobuf:"fixed64,1,req,name=id" json:"id,omitempty"`
	// time is the creation time of the message in epoch nanoseconds.
	Time *int64 `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	// body, after decoding, is a utf8 message.
	Body         []byte            `protobuf:"bytes,3,req,name=body" json:"body,omitempty"`
	BodyEncoding *Message_Encoding `protobuf:"varint,4,opt,name=body_encoding,enum=protos.Message_Encoding" json:"body_encoding,omitempty"`
	// my_next_dh contains a Curve25519 public value for future messages.
	MyNextDh []byte `protobuf:"bytes,5,opt,name=my_next_dh" json:"my_next_dh,omitempty"`
	// in_reply_to, if set, contains the |id| value of a previous message
	// sent by the recipient.
	InReplyTo *uint64 `protobuf:"varint,6,opt,name=in_reply_to" json:"in_reply_to,omitempty"`
	// also_ack contains message ids for other messages that are also
	// acknowledged by this message.
	AlsoAck       []uint64              `protobuf:"varint,10,rep,name=also_ack" json:"also_ack,omitempty"`
	Files         []*Message_Attachment `protobuf:"bytes,7,rep,name=files" json:"files,omitempty"`
	DetachedFiles []*Message_Detachment `protobuf:"bytes,8,rep,name=detached_files" json:"detached_files,omitempty"`
	// supported_version allows a client to advertise the maximum supported
	// version that it speaks.
	SupportedVersion *int32 `protobuf:"varint,9,opt,name=supported_version" json:"supported_version,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Message) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *Message) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Message) GetBodyEncoding() Message_Encoding {
	if m != nil && m.BodyEncoding != nil {
		return *m.BodyEncoding
	}
	return Message_RAW
}

func (m *Message) GetMyNextDh() []byte {
	if m != nil {
		return m.MyNextDh
	}
	return nil
}

func (m *Message) GetInReplyTo() uint64 {
	if m != nil && m.InReplyTo != nil {
		return *m.InReplyTo
	}
	return 0
}

func (m *Message) GetAlsoAck() []uint64 {
	if m != nil {
		return m.AlsoAck
	}
	return nil
}

func (m *Message) GetFiles() []*Message_Attachment {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Message) GetDetachedFiles() []*Message_Detachment {
	if m != nil {
		return m.DetachedFiles
	}
	return nil
}

func (m *Message) GetSupportedVersion() int32 {
	if m != nil && m.SupportedVersion != nil {
		return *m.SupportedVersion
	}
	return 0
}

type Message_Attachment struct {
	Filename         *string `protobuf:"bytes,1,req,name=filename" json:"filename,omitempty"`
	Contents         []byte  `protobuf:"bytes,2,req,name=contents" json:"contents,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Message_Attachment) Reset()         { *m = Message_Attachment{} }
func (m *Message_Attachment) String() string { return proto.CompactTextString(m) }
func (*Message_Attachment) ProtoMessage()    {}

func (m *Message_Attachment) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *Message_Attachment) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

type Message_Detachment struct {
	Filename         *string `protobuf:"bytes,1,req,name=filename" json:"filename,omitempty"`
	Size             *uint64 `protobuf:"varint,2,req,name=size" json:"size,omitempty"`
	PaddedSize       *uint64 `protobuf:"varint,3,req,name=padded_size" json:"padded_size,omitempty"`
	ChunkSize        *uint32 `protobuf:"varint,4,req,name=chunk_size" json:"chunk_size,omitempty"`
	Key              []byte  `protobuf:"bytes,5,req,name=key" json:"key,omitempty"`
	Url              *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Message_Detachment) Reset()         { *m = Message_Detachment{} }
func (m *Message_Detachment) String() string { return proto.CompactTextString(m) }
func (*Message_Detachment) ProtoMessage()    {}

func (m *Message_Detachment) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *Message_Detachment) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *Message_Detachment) GetPaddedSize() uint64 {
	if m != nil && m.PaddedSize != nil {
		return *m.PaddedSize
	}
	return 0
}

func (m *Message_Detachment) GetChunkSize() uint32 {
	if m != nil && m.ChunkSize != nil {
		return *m.ChunkSize
	}
	return 0
}

func (m *Message_Detachment) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message_Detachment) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.Reply_Status", Reply_Status_name, Reply_Status_value)
	proto.RegisterEnum("protos.Message_Encoding", Message_Encoding_name, Message_Encoding_value)
}
